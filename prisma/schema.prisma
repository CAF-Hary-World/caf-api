// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ROOT
  ADMIN
  RESIDENT
  OWNER
  VISITANT
  SECURITY
}

enum KIND {
  PEDESTRIAN
  DRIVER
}

enum STATUS {
  ALLOWED
  BLOCKED
  PROCESSING
}

// START USERS

model Role {
  id          String @id @default(uuid())
  createdAt   DateTime   @default(now())
  deletedAt   DateTime?   
  updatedAt   DateTime   @updatedAt
  name        ROLE @unique
  user        User[]
}

model User {
  id                      String @id @default(uuid())
  createdAt               DateTime   @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime   @updatedAt

  name                    String
  roleId                  String
  availableId             String?       @unique
  available               Available?

  role                    Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  adminId                 String? @unique
  admin                   Admin?
  ownerId                 String? @unique
  owner                   Owner?
  residentId              String? @unique
  resident                Resident?
  rootId                  String? @unique
  root                    Root?
}

model Root {
  id                      String @id @default(uuid())
  createdAt               DateTime   @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime   @updatedAt

  password                String
  email                   String     @unique
  
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admin {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?   
  updatedAt   DateTime    @updatedAt

  photo       String?
  password    String
  phone       String?
  email       String      @unique
  
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Owner {
  id                 String @id @default(uuid())
  createdAt          DateTime   @default(now())
  deletedAt          DateTime?
  updatedAt          DateTime   @updatedAt

  photo              String?
  password           String
  cpf                String      @unique
  email              String      @unique
  phone              String      @unique
  square             String
  house              String

  // Relation field on Owner model
  residents          Resident[]
  visitantsCreated   Visitant[]

  visitantsOnOwner   VisitantsOnOwner[]

  invitations        InvitationByOwner[]

  userId             String      @unique
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Unique constraint for the combination of square and house
  @@unique([square, house])
}

model VisitantsOnOwner {
  createdAt                 DateTime      @default(now())
  deletedAt                 DateTime?
  updatedAt                 DateTime      @updatedAt

  // Relation Visitant
  visitantId                String
  visitant                  Visitant         @relation(fields: [visitantId], references: [id], onDelete: Cascade)

  // Relation Owner
  ownerId                   String
  owner                     Owner         @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@id([ownerId, visitantId])
}

model VisitantsOnResident {
  createdAt                 DateTime      @default(now())
  deletedAt                 DateTime?
  updatedAt                 DateTime      @updatedAt

  // Relation Visitant
  visitantId                String
  visitant                  Visitant         @relation(fields: [visitantId], references: [id], onDelete: Cascade)

  // Relation Owner
  residentId                String
  resident                  Resident         @relation(fields: [residentId], references: [id], onDelete: Cascade)

  @@id([residentId, visitantId])
}

model InvitationByOwner {
  id          String @id @default(uuid())
  createdAt   DateTime   @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime   @updatedAt

  ownerId     String     
  owner       Owner      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  visitantId  String
  visitant    Visitant   @relation(fields: [visitantId], references: [id], onDelete: Cascade)
}

model InvitationByResident {
  id              String @id @default(uuid())
  createdAt       DateTime   @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime   @updatedAt

  residentId      String     
  resident        Resident      @relation(fields: [residentId], references: [id], onDelete: Cascade)
  visitantId      String
  visitant        Visitant   @relation(fields: [visitantId], references: [id], onDelete: Cascade)
}

model Resident {
  id                    String @id @default(uuid())
  createdAt             DateTime   @default(now())
  deletedAt             DateTime?
  updatedAt             DateTime   @updatedAt

  photo                 String?
  password              String
  cpf                   String      @unique
  email                 String?     @unique
  phone                 String?

  invitations           InvitationByResident[]

  visitantsOnResident   VisitantsOnResident[]

  // Relation field on Resident model
  visitants             Visitant[]
  ownerId               String
  owner                 Owner       @relation(fields: [ownerId], references: [id], onDelete: Cascade) 
  userId                String      @unique
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Visitant {
  id                      String        @id @default(uuid())
  createdAt               DateTime      @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime      @updatedAt

  name                    String
  phone                   String
  cpf                     String        @unique
  kind                    KIND
  email                   String?       @unique
  photo                   String?
  documentUrl             String?
  cnh                     String?       @unique
  invited                 Boolean       @default(false)

  availableId             String?       @unique
  available               Available?

  invitationByOwner       String?       @unique
  inviteByOwner           InvitationByOwner[]

  ownersOnVisitants       VisitantsOnOwner[]

  invitationByResident    String?       @unique
  inviteByResident        InvitationByResident[]
  
  residentsOnVisitants    VisitantsOnResident[]

  ownerId                 String?
  owner                   Owner?         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  residentId              String?
  resident                Resident?      @relation(fields: [residentId], references: [id], onDelete: Cascade)
}

// END USERS

// START AVAILABLE

model Available {
  id                String @id @default(uuid())
  createdAt         DateTime   @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime   @updatedAt

  status            STATUS
  justifications    AvailablesJustifications[]

  visitantId        String?    @unique
  visitant          Visitant?  @relation(fields: [visitantId], references: [id], onDelete: Cascade)

  userId            String?    @unique
  user              User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AvailablesJustifications {
  createdAt               DateTime   @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime   @updatedAt

  availableId             String
  availabe                Available @relation(fields: [availableId], references: [id], onDelete: Cascade)
  justificationId         String
  justification           Justification @relation(fields: [justificationId], references: [id], onDelete: Cascade)

  @@id([availableId, justificationId])
}

model Justification {
  id                      String @id @default(uuid())
  createdAt               DateTime   @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime   @updatedAt

  description             String @unique @default("Documentação pendente")

  availables              AvailablesJustifications[]

  justificationCategories JustificationCategories[]
}

model JustificationCategories {
  createdAt                   DateTime   @default(now())
  deletedAt                   DateTime?
  updatedAt                   DateTime   @updatedAt

  justificationId             String
  justification               Justification @relation(fields: [justificationId], references: [id], onDelete: Cascade)
  categoryId                  String
  category                    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  @@id([justificationId, categoryId])
}


// END AVAILABLE

// START Bookings


// END Bookings

// Polymorphic

model Category {
  id                            String @id @default(uuid())
  createdAt                     DateTime   @default(now())
  deletedAt                     DateTime?
  updatedAt                     DateTime   @updatedAt

  name                          String @unique

  categoryJustifications        JustificationCategories[]
}